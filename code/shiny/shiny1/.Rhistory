p2a = ggplot(data = trips_precov, aes(x=weekday, group = weekday, y = trip_percentage)) + ylim(0.72,0.87)+
geom_boxplot() + ggtitle('precov % by day of week')
p3a = ggplot(data = trips_precov, aes(x=Month,group = Month, y = Number.of.Trips)) +scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1))+ylim(3e+06,6.5e+06)+
geom_boxplot() + ggtitle('precov trips by month')
p4a = ggplot(data = trips_precov, aes(x=weekday, group = weekday, y = Number.of.Trips)) +ylim(3e+06,6.5e+06)+
geom_boxplot() + ggtitle('precov trips by day of week')
trips_cov=trips[460:748,]
p1b = ggplot(data = trips_cov, aes(x=Month,group = Month,y = trip_percentage)) +
scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1))+ylim(0.7,0.87)+
geom_boxplot() + ggtitle('cov % by month')
p2b = ggplot(data = trips_cov, aes(x=weekday, group = weekday, y = trip_percentage)) + ylim(0.72,0.87)+
geom_boxplot() + ggtitle('cov % by day of week')
p3b = ggplot(data = trips_cov, aes(x=Month,group = Month,y = Number.of.Trips)) +
scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1))+ylim(3e+06,6.5e+06)+
geom_boxplot() + ggtitle('cov trips by month')
p4b = ggplot(data = trips_cov, aes(x=weekday, group = weekday, y = Number.of.Trips)) +ylim(3e+06,6.5e+06)+
geom_boxplot() + ggtitle('cov trips by day of week')
trips_afcov=trips[749:1741,]
p1c = ggplot(data = trips_afcov, aes(x=Month,group = Month, y = trip_percentage)) +ylim(0.7,0.87)+
geom_boxplot() + ggtitle('postcov % by month')+
scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1))
p2c = ggplot(data = trips_afcov, aes(x=weekday, group = weekday, y = trip_percentage)) + ylim(0.72,0.87)+
geom_boxplot() + ggtitle('postcov % by day of week')
p3c = ggplot(data = trips_afcov, aes(x=Month,group = Month, y = Number.of.Trips)) + ylim(3e+06,6.5e+06)+
geom_boxplot() + ggtitle('postcov trips by month')+
scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1))
p4c = ggplot(data = trips_afcov, aes(x=weekday, group = weekday, y = Number.of.Trips)) +ylim(3e+06,6.5e+06)+
geom_boxplot() + ggtitle('postcov trips by day of week')
# most on May
p1a
# major increase from april to may, decrease from Oct. to Nov.
p1b   #Feb. value missing since no Feb. in cov period
# major increase from april to may, no decrease from Oct. to Nov.
p3b  #Feb. value missing since no Feb. in cov period
# least on Jan.
p1c
# least on Jan., but not too much difference
p3c
# compare percentage by month in 3 time periods; huge drop in percentage during covid, did not recover after covid
plot_grid(p1a, p1b,p1c, nrow=1, ncol =3)
# compare percentage by day in a week in 3 time periods; huge drop in percentage during covid, did not recover after covid; can see less percentages on weekends
plot_grid(p2a, p2b,p2c, nrow=1, ncol =3)
# compare trips by month in 3 time periods; huge drop during covid, but recover after covid
plot_grid(p3a, p3b,p3c, nrow=1, ncol =3)
# compare trips by day in a week in 3 time periods; huge drop during covid, but recover after covid; can see less trips on Sunday
plot_grid(p4a, p4b,p4c, nrow=1, ncol =3)
# compare pre-covid percentage and number of trips: although percentage is steady by month, trips made vary a lot
plot_grid(p1a, p3a,p2a,p4a, nrow=2, ncol =2)
# compare during-covid percentage and number of trips: percentage and trips align, both increase from April to May
plot_grid(p1b, p3b,p2b,p4b, nrow=2, ncol =2)
# compare after-covid percentage and number of trips: percentage and trips align
plot_grid(p1c, p3c,p2c,p4c, nrow=2, ncol =2)
reviews = read.csv2('reviews_mex.csv')
# 加载必要的库
library(shiny)
library(shinythemes)
library(ggplot2)
library(dplyr)
library(leaflet)
library(tidyr)
library(tidytext)
# 读取数据
da2 <- read.csv('Tampa_mexican_restaurants.csv')
trips <- read.csv('hillsborough.csv')
# 定义UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Yelp Data Analysis - Mexican Restaurants in Hillsborough, FL", windowTitle = "Welcome to Use Our Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("selectedPage", "Choose a Page:", choices = c("Main Page", "Restaurant Analysis", "Travel Analysis"))
),
mainPanel(
# 主页面
conditionalPanel(
condition = "input.selectedPage === 'Main Page'",
# [主页面的内容]
),
# 餐厅分析页面
conditionalPanel(
condition = "input.selectedPage === 'Restaurant Analysis'",
# [餐厅分析页面的内容]
),
# 旅行分析页面
conditionalPanel(
condition = "input.selectedPage === 'Travel Analysis'",
selectInput("selectedTimePeriod", "Select Time Period:", choices = c("During Covid", "After Covid")),
plotOutput("tripPercentagePlot"),
plotOutput("numberOfTripsPlot")
)
)
)
)
# 定义Server逻辑
server <- function(input, output, session) {
# [之前的server逻辑]
# 添加新的图表渲染逻辑
output$tripPercentagePlot <- renderPlot({
req(input$selectedPage == "Travel Analysis")
df <- if(input$selectedTimePeriod == "During Covid") trips_cov else trips_afcov
ggplot(data = df, aes(x = Month, group = Month, y = trip_percentage)) +
geom_boxplot() +
ggtitle(if(input$selectedTimePeriod == "During Covid") 'cov % by month' else 'postcov % by month') +
scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1)) +
ylim(0.7, 0.87)
})
output$numberOfTripsPlot <- renderPlot({
req(input$selectedPage == "Travel Analysis")
df <- if(input$selectedTimePeriod == "During Covid") trips_cov else trips_afcov
ggplot(data = df, aes(x = Month, group = Month, y = Number.of.Trips)) +
geom_boxplot() +
ggtitle(if(input$selectedTimePeriod == "During Covid") 'cov trips by month' else 'postcov trips by month') +
scale_x_continuous(breaks = seq(1, 12, by = 1), labels = seq(1, 12, by = 1)) +
ylim(3e+06, 6.5e+06)
})
}
# 运行Shiny应用程序
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
library(tidytext)
library(syuzhet)
library(wordcloud)
# 读取数据
da2 <- read.csv('Tampa_mexican_restaurants.csv')
trips <- read.csv('hillsborough.csv')
reviews <- read.csv('bot_sentiment.csv')
# 定义 UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Yelp Data Analysis - Mexican Restaurants in Hillsborough, FL", windowTitle = "Welcome to Use Our Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("selectedPage", "Choose a Page:", choices = c("Main Page", "Restaurant Analysis", "Travel Analysis", "1-Star Reviews Viewer"))
),
mainPanel(
# 条件面板：主页
conditionalPanel(
condition = "input.selectedPage === 'Main Page'",
div(class = "welcome-message",
h1("Welcome to Use Our Dashboard", class = "main-title"),
h2("Overview", class = "overview-title"),
p("Our recommendations are based on data analysis from Yelp, U.S. Bureau of Transportation Statistics, and US Census Bureau.",
class = "overview-text"),
hr(),
div(class = "recommendations",
h3("Overall Recommendations", class = "rec-title"),
p("Geographical Recommendations: Zip codes 33603, 33604, 33614 in Tampa City, or 33570 in Sun City.", class = "rec-text"),
p("Restaurant Attributes: No TV, cautious with delivery service.", class = "rec-text"),
p("Quality Control: considerations for sour cream.", class = "rec-text"),
p("Improvements: ordering process, staff training, especially for managers.", class = "rec-text"),
p("Topics related to Chipotle: Overall improvements are needed.", class = "rec-text")
),
hr(),
h3("Restaurant Analysis", class = "analysis-title"),
p("This section displays specific information about the restaurant, as well as potential areas for improvement derived from sentiment analysis.", class = "analysis-text"),
h3("Travel Analysis", class = "analysis-title"),
p("This part is the comparison of the number of travelers before and after the Covid-19 obtained by analyzing the U.S. Bureau of Transportation Statistics data. We can conclude that compared with the epidemic period, the number of travelers has returned to the pre-epidemic level. There is no need to worry about passenger flow!", class = "analysis-text"),
hr(),
h3("Contact Us", class = "contact-title"),
p(strong("Feel free to reach out to any of our group members:"),
br(),
"Ruofeng Tang: rtang64@wisc.edu",
br(),
"Ziming Li: zli2543@wisc.edu",
br(),
"Bingyan Liang: bliang34@wisc.edu",
class = "contact-text")
),
style = "padding: 20px;"
),
# 条件面板：餐厅分析
conditionalPanel(
condition = "input.selectedPage === 'Restaurant Analysis'",
selectInput("selectedCity", "Select a City:", choices = unique(da2$city)),
textInput("restaurantName", "Enter Restaurant Name:", value = ""),
leafletOutput("map"),
plotOutput("starHistogram"),
verbatimTextOutput("sentimentAnalysis"),
plotOutput("wordCloud")
),
# 条件面板：旅行分析
conditionalPanel(
condition = "input.selectedPage === 'Travel Analysis'",
plotOutput("timeSeriesPlot"),
plotOutput("prePostCovidPlot")
),
# 条件面板：1星评价查看器
conditionalPanel(
condition = "input.selectedPage === '1-Star Reviews Viewer'",
HTML("<p>Most reviews have a positive sentiment score, regardless of star ratings. Therefore, we think it would be more helpful to check negative reviews and know what people feel most strongly about.</p>
<p>You can input some text (case-insensitive) and check relative reviews. Relative reviews are randomly selected; to begin with, the 4 most mentioned bigrams are 'taco bell', 'customer service', 'sour cream', 'taco bus'.</p>"),
sidebarPanel(
textInput(inputId = "text", label = "Check a text:", value = 'customer service'),
numericInput(inputId = "obs", label = "Number of observations to view in random:", value = 5)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view")
)
)
)
)
)
# 定义服务器逻辑
server <- function(input, output, session) {
# 餐厅分析的过滤数据
filteredData <- reactive({
req(input$selectedPage == "Restaurant Analysis")
da2 %>% filter(city == input$selectedCity)
})
# 餐厅分析的地图渲染
output$map <- renderLeaflet({
df <- filteredData()
if(nrow(df) > 0) {
df_aggregated <- df %>%
group_by(business_id, name, address, latitude, longitude) %>%
summarise(average_stars = mean(stars_y, na.rm = TRUE),
total_reviews = sum(review_count, na.rm = TRUE), .groups = 'drop')
m <- leaflet(df_aggregated) %>%
addTiles() %>%
setView(lng = mean(df_aggregated$longitude), lat = mean(df_aggregated$latitude), zoom = 9) %>%
addMarkers(~longitude, ~latitude,
popup = ~paste(name, "<br>", address, "<br>Average Stars:", average_stars, "<br>Total Reviews:", total_reviews),
clusterOptions = markerClusterOptions())
m
}
})
# 餐厅分析的星级分布直方图
output$starHistogram <- renderPlot({
df <- filteredData()
if(nrow(df) > 0) {
ggplot(df, aes(x = stars_y)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "white") +
theme_minimal() +
labs(title = paste("Star Distribution in", input$selectedCity), x = "Stars", y = "Count")
}
})
# 餐厅分析的情感分析
output$sentimentAnalysis <- renderText({
req(input$restaurantName, input$selectedPage == "Restaurant Analysis")
df <- filteredData()
restaurant_reviews <- df %>% filter(name == input$restaurantName) %>% select(text)
if(nrow(restaurant_reviews) > 0) {
sentiment <- get_sentiments("bing")
words <- restaurant_reviews %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
inner_join(sentiment, by = "word") %>%
filter(sentiment == "negative") %>%
summarise(negative_words_count = n(), .groups = 'drop')
if(is.null(words) || nrow(words) == 0 || words$negative_words_count == 0) {
"No negative words found for this restaurant."
} else {
paste("Number of negative words for", input$restaurantName, ":", words$negative_words_count)
}
} else {
"No reviews found for this restaurant."
}
})
# 餐厅分析的词云
output$wordCloud <- renderPlot({
req(input$restaurantName, input$selectedPage == "Restaurant Analysis")
df <- filteredData()
restaurant_reviews <- df %>% filter(name == input$restaurantName) %>% select(text)
if(nrow(restaurant_reviews) > 0) {
words <- restaurant_reviews %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n > 1)
wordcloud(words$word, words$n, max.words = 100)
}
}, width = 800, height = 600)
# 旅行分析的时间序列图
output$timeSeriesPlot <- renderPlot({
req(input$selectedPage == "Travel Analysis")
df <- trips %>%
mutate(Date = as.Date(Date, format = "%Y/%m/%d")) %>%
select(Date, Number.of.Trips)
ggplot(df, aes(x = Date, y = Number.of.Trips)) +
geom_line() +
labs(title = "Total Number of Trips Over Time", x = "Date", y = "Number of Trips")
})
# 旅行分析的前后 Covid 比较图
output$prePostCovidPlot <- renderPlot({
req(input$selectedPage == "Travel Analysis")
df <- trips %>%
mutate(Date = as.Date(Date, format = "%Y/%m/%d"),
Period = ifelse(Date < as.Date("2020-03-01"), "Pre-Covid", "Post-Covid")) %>%
select(Period, Number.of.Trips)
ggplot(df, aes(x = Period, y = Number.of.Trips)) +
geom_boxplot() +
labs(title = "Travel Patterns Before and After Covid-19", x = "", y = "Number of Trips")
})
# 1星评价查看器的逻辑
datasetInput <- reactive({
reviews[grep(tolower(input$text), tolower(reviews$text)), ]
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
sampled_data <- datasetInput()
if (nrow(sampled_data) > input$obs) {
sampled_data <- sampled_data[sample(nrow(sampled_data), size = input$obs), ]
}
sampled_data
})
}
# 创建 Shiny 应用
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(leaflet)
library(dplyr)
library(tidytext)
library(syuzhet)
library(wordcloud)
library(cowplot)  # 用于创建 plot_grid
# 读取数据
da2 <- read.csv('Tampa_mexican_restaurants.csv')
trips <- read.csv('hillsborough.csv')
reviews <- read.csv('bot_sentiment.csv')
# 定义 UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Yelp Data Analysis - Mexican Restaurants in Hillsborough, FL", windowTitle = "Welcome to Use Our Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("selectedPage", "Choose a Page:", choices = c("Main Page", "Restaurant Analysis", "Travel Analysis", "1-Star Reviews Viewer"))
),
mainPanel(
# 条件面板：主页
conditionalPanel(
condition = "input.selectedPage === 'Main Page'",
div(class = "welcome-message",
h1("Welcome to Use Our Dashboard", class = "main-title"),
h2("Overview", class = "overview-title"),
p("Our recommendations are based on data analysis from Yelp, U.S. Bureau of Transportation Statistics, and US Census Bureau.",
class = "overview-text"),
hr(),
div(class = "recommendations",
h3("Overall Recommendations", class = "rec-title"),
p("Geographical Recommendations: Zip codes 33603, 33604, 33614 in Tampa City, or 33570 in Sun City.", class = "rec-text"),
p("Restaurant Attributes: No TV, cautious with delivery service.", class = "rec-text"),
p("Quality Control: considerations for sour cream.", class = "rec-text"),
p("Improvements: ordering process, staff training, especially for managers.", class = "rec-text"),
p("Topics related to Chipotle: Overall improvements are needed.", class = "rec-text")
),
hr(),
h3("Restaurant Analysis", class = "analysis-title"),
p("This section displays specific information about the restaurant, as well as potential areas for improvement derived from sentiment analysis.", class = "analysis-text"),
h3("Travel Analysis", class = "analysis-title"),
p("This part is the comparison of the number of travelers before and after the Covid-19 obtained by analyzing the U.S. Bureau of Transportation Statistics data. We can conclude that compared with the epidemic period, the number of travelers has returned to the pre-epidemic level. There is no need to worry about passenger flow!", class = "analysis-text"),
hr(),
h3("Contact Us", class = "contact-title"),
p(strong("Feel free to reach out to any of our group members:"),
br(),
"Ruofeng Tang: rtang64@wisc.edu",
br(),
"Ziming Li: zli2543@wisc.edu",
br(),
"Bingyan Liang: bliang34@wisc.edu",
class = "contact-text")
),
style = "padding: 20px;"
),
# 条件面板：餐厅分析
conditionalPanel(
condition = "input.selectedPage === 'Restaurant Analysis'",
selectInput("selectedCity", "Select a City:", choices = unique(da2$city)),
textInput("restaurantName", "Enter Restaurant Name:", value = ""),
leafletOutput("map"),
plotOutput("starHistogram"),
verbatimTextOutput("sentimentAnalysis"),
plotOutput("wordCloud")
),
# 条件面板：旅行分析
conditionalPanel(
condition = "input.selectedPage === 'Travel Analysis'",
selectInput("selectedComparison", "Select Comparison Type:",
choices = c("Percentage by Month", "Percentage by Day", "Trips by Month", "Trips by Day",
"Pre-Covid Comparison", "During-Covid Comparison", "After-Covid Comparison")),
plotOutput("comparisonPlot")
),
# 条件面板：1星评价查看器
conditionalPanel(
condition = "input.selectedPage === '1-Star Reviews Viewer'",
HTML("<p>Most reviews have a positive sentiment score, regardless of star ratings. Therefore, we think it would be more helpful to check negative reviews and know what people feel most strongly about.</p>
<p>You can input some text (case-insensitive) and check relative reviews. Relative reviews are randomly selected; to begin with, the 4 most mentioned bigrams are 'taco bell', 'customer service', 'sour cream', 'taco bus'.</p>"),
sidebarPanel(
textInput(inputId = "text", label = "Check a text:", value = 'customer service'),
numericInput(inputId = "obs", label = "Number of observations to view in random:", value = 5)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view")
)
)
)
)
)
# 定义服务器逻辑
server <- function(input, output, session) {
# 餐厅分析的过滤数据
filteredData <- reactive({
req(input$selectedPage == "Restaurant Analysis")
da2 %>% filter(city == input$selectedCity)
})
# 餐厅分析的地图渲染
output$map <- renderLeaflet({
df <- filteredData()
if(nrow(df) > 0) {
df_aggregated <- df %>%
group_by(business_id, name, address, latitude, longitude) %>%
summarise(average_stars = mean(stars_y, na.rm = TRUE),
total_reviews = sum(review_count, na.rm = TRUE), .groups = 'drop')
m <- leaflet(df_aggregated) %>%
addTiles() %>%
setView(lng = mean(df_aggregated$longitude), lat = mean(df_aggregated$latitude), zoom = 9) %>%
addMarkers(~longitude, ~latitude,
popup = ~paste(name, "<br>", address, "<br>Average Stars:", average_stars, "<br>Total Reviews:", total_reviews),
clusterOptions = markerClusterOptions())
m
}
})
# 餐厅分析的星级分布直方图
output$starHistogram <- renderPlot({
df <- filteredData()
if(nrow(df) > 0) {
ggplot(df, aes(x = stars_y)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "white") +
theme_minimal() +
labs(title = paste("Star Distribution in", input$selectedCity), x = "Stars", y = "Count")
}
})
# 餐厅分析的情感分析
output$sentimentAnalysis <- renderText({
req(input$restaurantName, input$selectedPage == "Restaurant Analysis")
df <- filteredData()
restaurant_reviews <- df %>% filter(name == input$restaurantName) %>% select(text)
if(nrow(restaurant_reviews) > 0) {
sentiment <- get_sentiments("bing")
words <- restaurant_reviews %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
inner_join(sentiment, by = "word") %>%
filter(sentiment == "negative") %>%
summarise(negative_words_count = n(), .groups = 'drop')
if(is.null(words) || nrow(words) == 0 || words$negative_words_count == 0) {
"No negative words found for this restaurant."
} else {
paste("Number of negative words for", input$restaurantName, ":", words$negative_words_count)
}
} else {
"No reviews found for this restaurant."
}
})
# 餐厅分析的词云
output$wordCloud <- renderPlot({
req(input$restaurantName, input$selectedPage == "Restaurant Analysis")
df <- filteredData()
restaurant_reviews <- df %>% filter(name == input$restaurantName) %>% select(text)
if(nrow(restaurant_reviews) > 0) {
words <- restaurant_reviews %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n > 1)
wordcloud(words$word, words$n, max.words = 100)
}
}, width = 800, height = 600)
# 新的旅行分析部分
output$comparisonPlot <- renderPlot({
req(input$selectedPage == "Travel Analysis")
# 假设的图表代码
# p1a <- ggplot(...), p1b <- ggplot(...), 等等
switch(input$selectedComparison,
"Percentage by Month" = plot_grid(p1a, p1b, p1c, nrow = 1, ncol = 3),
"Percentage by Day" = plot_grid(p2a, p2b, p2c, nrow = 1, ncol = 3),
"Trips by Month" = plot_grid(p3a, p3b, p3c, nrow = 1, ncol = 3),
"Trips by Day" = plot_grid(p4a, p4b, p4c, nrow = 1, ncol = 3),
"Pre-Covid Comparison" = plot_grid(p1a, p3a, p2a, p4a, nrow = 2, ncol = 2),
"During-Covid Comparison" = plot_grid(p1b, p3b, p2b, p4b, nrow = 2, ncol = 2),
"After-Covid Comparison" = plot_grid(p1c, p3c, p2c, p4c, nrow = 2, ncol = 2)
)
})
# 1星评价查看器的逻辑
datasetInput <- reactive({
reviews[grep(tolower(input$text), tolower(reviews$text)), ]
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
sampled_data <- datasetInput()
if (nrow(sampled_data) > input$obs) {
sampled_data <- sampled_data[sample(nrow(sampled_data), size = input$obs), ]
}
sampled_data
})
}
# 创建 Shiny 应用
shinyApp(ui = ui, server = server)
runApp()
